<project default="all" name="RunCity tracks visualizer Google App Engine deployer">
    <property file="user.properties" />
    <property file="build.properties" />

    <import file="${appengine.sdk}/config/user/ant-macros.xml" optional="true"/>
    
    <target name="deploy" depends="do-deploy" />
    <target name="all" depends="prepare, compile"/>

    <target name="prepare">
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${output.war.dir}"/>
        <mkdir dir="${output.war.dir}/WEB-INF/lib"/>
        <mkdir dir="${output.war.dir}/WEB-INF/classes"/>

        <!-- TODO Check if Ant version is supported -->
        <!-- TODO Check if AppEngine SDK specified correctly -->
    </target>

    <target name="compile">
        <!-- Nothing to compile right now -->
    </target>

    <target name="prepare-deploy">
        <copy todir="${output.dir}">
            <fileset dir="${root.dir}" includes="war/**"/>
        </copy>

        <copy todir="${output.war.dir}">
            <fileset dir="${bgmaps.root.dir}">
                <!--
                cp -r index.html event.html changelist.txt img results points $output
                -->
                <include name="img/**"/>
                <include name="results/**"/>
                <include name="points/**"/>
                <include name="event.html"/>
                <include name="index.html"/>
                <include name="favicon.ico"/>
            </fileset>
        </copy>

        <!-- Ant hacker: prepare input for yui-compressor
            all css files listed between CSS_BEGIN and CSS_END
            and all js files listed between JAVASCRIPT_BEGIN and JAVASCRIPT_END
            will be compressed with yui-compressor into one file.
          -->
        <copy file="${bgmaps.root.dir}/event.html" tofile="${output.dir}/_tmp_event.js"/>
        <replaceregexp file="${output.dir}/_tmp_event.js" encoding="UTF-8"
                       match=".*!-- JAVASCRIPT_BEGIN --.(.*).!-- JAVASCRIPT_END --.*"
                       flags="s"
                       replace="\1"
                       byline="false"/>
        <replaceregexp file="${output.dir}/_tmp_event.js" encoding="UTF-8"
                       match=".*script src=.(js.*). type=.text/javascript.*"
                       replace="${bgmaps.root.dir}/\1 "
                       byline="true"/>
        <loadfile property="js.files" srcFile="${output.dir}/_tmp_event.js">
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>

        <!-- Workaround: filterchain to delete UTF-8 BOM (old ant on windows) -->
        <concat dest="${output.dir}/_tmp_event.css" append="false"
                fixlastline="false"
                encoding="UTF-8"
                outputencoding="UTF-8">
            <fileset dir="${bgmaps.root.dir}/css" includes="*.css"/>
            <filterchain>
                <deletecharacters chars="&#xFEFF;" />
            </filterchain>
        </concat>
        <concat dest="${output.dir}/_tmp_event.js" append="false"
                fixlastline="false"
                encoding="UTF-8"
                outputencoding="UTF-8">
            <filelist files="${js.files}"/>
            <filterchain>
                <deletecharacters chars="&#xFEFF;" />
            </filterchain>
        </concat>

        <!-- Running yui-compressor with file list -->
        <java jar="${compressor.jar}"
              fork="true" failonerror="true">
            <arg value="--charset"/>
            <arg value="utf-8"/>
            <arg value="--type"/>
            <arg value="css"/>
            <arg value="-o"/>
            <arg value="${output.css}"/>
            <arg value="${output.dir}/_tmp_event.css"/>
        </java>

        <java jar="${compressor.jar}"
              fork="true" failonerror="true">
            <arg value="--charset"/>
            <arg value="utf-8"/>
            <arg value="--type"/>
            <arg value="js"/>
            <arg value="-o"/>
            <arg value="${output.js}"/>
            <arg value="${output.dir}/_tmp_event.js"/>
        </java>

        <!-- Replacing final file -->
        <replaceregexp file="${output.war.dir}/index.html" encoding="UTF-8"
                       match=".!-- CSS_BEGIN --.(.*).!-- CSS_END --."
                       flags="s"
                       replace="  &lt;link href='${compressed.css.name}' rel='stylesheet' type='text/css' />"
                       byline="false"/>

        <replaceregexp file="${output.war.dir}/event.html" encoding="UTF-8"
                       match=".!-- CSS_BEGIN --.(.*).!-- CSS_END --."
                       flags="s"
                       replace="  &lt;link href='${compressed.css.name}' rel='stylesheet' type='text/css' />"
                       byline="false"/>

        <replaceregexp file="${output.war.dir}/event.html" encoding="UTF-8"
                       match=".!-- JAVASCRIPT_BEGIN --.(.*).!-- JAVASCRIPT_END --."
                       flags="s"
                       replace="  &lt;script src='${compressed.js.name}' type='text/javascript' charset='UTF-8'>\&lt;/script>"
                       byline="false"/>

        <!-- clean up -->
        <delete file="${output.dir}/_tmp_event.css"/>
        <delete file="${output.dir}/_tmp_event.js"/>
    </target>

    <target name="prepare-appengine-env">
        <echo message="Checking for ${appengine.sdk}/config/user/ant-macros.xml"/>
        <condition property="appengine-sdk-present">
            <and>
                <isset property="appengine.sdk"/>
                <available file="${appengine.sdk}/config/user/ant-macros.xml" type="file"/>
            </and>
        </condition>
        <fail message="appengine.sdk property is not set or incorrect (failed to locate SDK/config/user/ant-macros.xml)!"
              unless="appengine-sdk-present"/>

        <!-- Copy jars (not important cause we don't have server side app)
        <copy todir="${output.war.dir}/WEB-INF/lib"
              flatten="true">
            <fileset dir="${appengine.sdk}/lib/user">
                <include name="**/*.jar" />
            </fileset>
        </copy> -->
    </target>

    <target name="do-deploy" depends="all, prepare-deploy, prepare-appengine-env">
        <echo message="deploying ${output.war.dir}"/>
        <appcfg action="update" war="${output.war.dir}" />
    </target>

    <target name="runserver" depends="prepare-deploy, prepare-appengine-env"
            description="Starts the development server.">
        <dev_appserver war="war" />
    </target>

    <target name="clean">
        <delete dir="${output.dir}"/>
    </target>
</project>
